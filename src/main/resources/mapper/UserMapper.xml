<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace 必须和接口的全路径一致，否则无法找到该mapper文件-->
<mapper namespace="com.example.backapi.mapper.UserMapper">

<!--   自定义映射规则，resultMap
     id值是负责映射分配是唯一的，type是实体类，column是数据库字段，property是实体类的属性
     配合完成数据库和实体类名称不一致的映射
-->
<!--    <resultMap id="UserResultMap" type="com.example.backapi.pojo.User" >-->
<!--        <id column="uid" property="uid"/>-->
<!--        <result column="is_delete" property="isDelete"/>-->
<!--        <result column="created_user" property="createdUser" />-->
<!--        <result column="created_time" property="createdTime" />-->
<!--        <result column="modified_user" property="modifiedUser"/>-->
<!--        <result column="modified_time" property="modifiedTime" />-->
<!--    </resultMap>-->



    <resultMap id="ChatUserResultMap" type="com.example.backapi.pojo.ChatUser" >
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="message" property="message" typeHandler="com.example.backapi.handler.ListToVarcharTypeHandler" />
        <result column="created_user" property="createdUser" />
        <result column="created_time" property="createdTime" />
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime" />
    </resultMap>



<!--    id属性 表示映射的接口中方法的名称，直接在标签的内容编写sql语句-->
<!--    useGeneratedKeys="true" 表示插入后返回自增的主键值，keyProperty="uid" 表示将主键值赋值给uid属性-->
<!--    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">-->
<!--        INSERT INTO tb_user (-->
<!--        username, password, salt, phone, email, gender, avater,-->
<!--        is_delete, created_user, created_time, modified_user, modified_time-->
<!--        ) VALUES (-->
<!--         #{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avater},-->
<!--        #{isDelete}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime}-->
<!--      )-->
<!--    </insert>-->

<!--  查询结果是一个对象，对个对象的属性进行赋值，通过resultMap标签进行映射 -->

<!--
   resultType="com.example.backapi.entity.User" 表示返回的结果类型是User对象
   通过resultMap标签进行映射，将数据库的字段映射到User对象的属性上

   resultMap标签中的id属性必须和select标签中的id属性一致，才能进行映射
   通过column属性指定数据库的字段，通过property属性指定User对象的属性
-->
<!--    <select id="findUserByName" resultMap="UserResultMap">-->
<!--        SELECT * FROM tb_user WHERE username = #{username}-->
<!--    </select>-->

    <insert id="chatInsert" useGeneratedKeys="true" keyProperty="uid" >
        INSERT INTO chat_user (
        username, password, salt, phone, email, gender, avater,
        is_delete, message,created_user, created_time, modified_user, modified_time
        ) VALUES (
        #{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avater},
        #{isDelete}, #{message,typeHandler=com.example.backapi.handler.ListToVarcharTypeHandler}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime}
        )
    </insert>

    <update id="updateByName" parameterType="com.example.backapi.pojo.ChatUser">
        UPDATE chat_user SET phone=#{phone}, email=#{email},gender=#{gender},avater=#{avater},
        modified_user=#{modifiedUser}, modified_time=#{modifiedTime}
        WHERE
        username=#{username}
    </update>

    <select id="findChatUserByName" resultMap="ChatUserResultMap">
        SELECT * FROM chat_user WHERE username = #{username}
    </select>

    <update id="updateMessage"  parameterType="com.example.backapi.pojo.UserMessage">
        UPDATE chat_user SET
        message=#{message,typeHandler=com.example.backapi.handler.ListToVarcharTypeHandler}
        WHERE
        username=#{username}
    </update>


</mapper>